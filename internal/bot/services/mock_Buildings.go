// Code generated by mockery v2.38.0. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Buildings_mock is an autogenerated mock type for the Buildings type
type Buildings_mock struct {
	mock.Mock
}

type Buildings_mock_Expecter struct {
	mock *mock.Mock
}

func (_m *Buildings_mock) EXPECT() *Buildings_mock_Expecter {
	return &Buildings_mock_Expecter{mock: &_m.Mock}
}

// GetBuildingPreviews provides a mock function with given fields: ctx, addressPrefix, limit, offset
func (_m *Buildings_mock) GetBuildingPreviews(ctx context.Context, addressPrefix string, limit int, offset int) ([]BuildingPreview, error) {
	ret := _m.Called(ctx, addressPrefix, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetBuildingPreviews")
	}

	var r0 []BuildingPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]BuildingPreview, error)); ok {
		return rf(ctx, addressPrefix, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []BuildingPreview); ok {
		r0 = rf(ctx, addressPrefix, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BuildingPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, addressPrefix, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Buildings_mock_GetBuildingPreviews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBuildingPreviews'
type Buildings_mock_GetBuildingPreviews_Call struct {
	*mock.Call
}

// GetBuildingPreviews is a helper method to define mock.On call
//   - ctx context.Context
//   - addressPrefix string
//   - limit int
//   - offset int
func (_e *Buildings_mock_Expecter) GetBuildingPreviews(ctx interface{}, addressPrefix interface{}, limit interface{}, offset interface{}) *Buildings_mock_GetBuildingPreviews_Call {
	return &Buildings_mock_GetBuildingPreviews_Call{Call: _e.mock.On("GetBuildingPreviews", ctx, addressPrefix, limit, offset)}
}

func (_c *Buildings_mock_GetBuildingPreviews_Call) Run(run func(ctx context.Context, addressPrefix string, limit int, offset int)) *Buildings_mock_GetBuildingPreviews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *Buildings_mock_GetBuildingPreviews_Call) Return(_a0 []BuildingPreview, _a1 error) *Buildings_mock_GetBuildingPreviews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Buildings_mock_GetBuildingPreviews_Call) RunAndReturn(run func(context.Context, string, int, int) ([]BuildingPreview, error)) *Buildings_mock_GetBuildingPreviews_Call {
	_c.Call.Return(run)
	return _c
}

// GetBuildingsByAddress provides a mock function with given fields: c, address
func (_m *Buildings_mock) GetBuildingsByAddress(c context.Context, address string) ([]BuildingDTO, error) {
	ret := _m.Called(c, address)

	if len(ret) == 0 {
		panic("no return value specified for GetBuildingsByAddress")
	}

	var r0 []BuildingDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]BuildingDTO, error)); ok {
		return rf(c, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []BuildingDTO); ok {
		r0 = rf(c, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BuildingDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Buildings_mock_GetBuildingsByAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBuildingsByAddress'
type Buildings_mock_GetBuildingsByAddress_Call struct {
	*mock.Call
}

// GetBuildingsByAddress is a helper method to define mock.On call
//   - c context.Context
//   - address string
func (_e *Buildings_mock_Expecter) GetBuildingsByAddress(c interface{}, address interface{}) *Buildings_mock_GetBuildingsByAddress_Call {
	return &Buildings_mock_GetBuildingsByAddress_Call{Call: _e.mock.On("GetBuildingsByAddress", c, address)}
}

func (_c *Buildings_mock_GetBuildingsByAddress_Call) Run(run func(c context.Context, address string)) *Buildings_mock_GetBuildingsByAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Buildings_mock_GetBuildingsByAddress_Call) Return(_a0 []BuildingDTO, _a1 error) *Buildings_mock_GetBuildingsByAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Buildings_mock_GetBuildingsByAddress_Call) RunAndReturn(run func(context.Context, string) ([]BuildingDTO, error)) *Buildings_mock_GetBuildingsByAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetNearestBuildingPreviews provides a mock function with given fields: ctx, latitude, longitude, limit, offset
func (_m *Buildings_mock) GetNearestBuildingPreviews(ctx context.Context, latitude float64, longitude float64, limit int, offset int) ([]BuildingPreview, error) {
	ret := _m.Called(ctx, latitude, longitude, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetNearestBuildingPreviews")
	}

	var r0 []BuildingPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64, int, int) ([]BuildingPreview, error)); ok {
		return rf(ctx, latitude, longitude, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64, int, int) []BuildingPreview); ok {
		r0 = rf(ctx, latitude, longitude, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BuildingPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64, float64, int, int) error); ok {
		r1 = rf(ctx, latitude, longitude, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Buildings_mock_GetNearestBuildingPreviews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNearestBuildingPreviews'
type Buildings_mock_GetNearestBuildingPreviews_Call struct {
	*mock.Call
}

// GetNearestBuildingPreviews is a helper method to define mock.On call
//   - ctx context.Context
//   - latitude float64
//   - longitude float64
//   - limit int
//   - offset int
func (_e *Buildings_mock_Expecter) GetNearestBuildingPreviews(ctx interface{}, latitude interface{}, longitude interface{}, limit interface{}, offset interface{}) *Buildings_mock_GetNearestBuildingPreviews_Call {
	return &Buildings_mock_GetNearestBuildingPreviews_Call{Call: _e.mock.On("GetNearestBuildingPreviews", ctx, latitude, longitude, limit, offset)}
}

func (_c *Buildings_mock_GetNearestBuildingPreviews_Call) Run(run func(ctx context.Context, latitude float64, longitude float64, limit int, offset int)) *Buildings_mock_GetNearestBuildingPreviews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float64), args[2].(float64), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *Buildings_mock_GetNearestBuildingPreviews_Call) Return(_a0 []BuildingPreview, _a1 error) *Buildings_mock_GetNearestBuildingPreviews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Buildings_mock_GetNearestBuildingPreviews_Call) RunAndReturn(run func(context.Context, float64, float64, int, int) ([]BuildingPreview, error)) *Buildings_mock_GetNearestBuildingPreviews_Call {
	_c.Call.Return(run)
	return _c
}

// NewBuildings_mock creates a new instance of Buildings_mock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuildings_mock(t interface {
	mock.TestingT
	Cleanup(func())
}) *Buildings_mock {
	mock := &Buildings_mock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
