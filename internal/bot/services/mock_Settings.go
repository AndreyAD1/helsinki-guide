// Code generated by mockery v2.39.1. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Settings_mock is an autogenerated mock type for the Settings type
type Settings_mock struct {
	mock.Mock
}

type Settings_mock_Expecter struct {
	mock *mock.Mock
}

func (_m *Settings_mock) EXPECT() *Settings_mock_Expecter {
	return &Settings_mock_Expecter{mock: &_m.Mock}
}

// SetLanguage provides a mock function with given fields: ctx, userID, language
func (_m *Settings_mock) SetLanguage(ctx context.Context, userID int64, language string) error {
	ret := _m.Called(ctx, userID, language)

	if len(ret) == 0 {
		panic("no return value specified for SetLanguage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, userID, language)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Settings_mock_SetLanguage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLanguage'
type Settings_mock_SetLanguage_Call struct {
	*mock.Call
}

// SetLanguage is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - language string
func (_e *Settings_mock_Expecter) SetLanguage(ctx interface{}, userID interface{}, language interface{}) *Settings_mock_SetLanguage_Call {
	return &Settings_mock_SetLanguage_Call{Call: _e.mock.On("SetLanguage", ctx, userID, language)}
}

func (_c *Settings_mock_SetLanguage_Call) Run(run func(ctx context.Context, userID int64, language string)) *Settings_mock_SetLanguage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *Settings_mock_SetLanguage_Call) Return(_a0 error) *Settings_mock_SetLanguage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Settings_mock_SetLanguage_Call) RunAndReturn(run func(context.Context, int64, string) error) *Settings_mock_SetLanguage_Call {
	_c.Call.Return(run)
	return _c
}

// NewSettings_mock creates a new instance of Settings_mock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSettings_mock(t interface {
	mock.TestingT
	Cleanup(func())
}) *Settings_mock {
	mock := &Settings_mock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
